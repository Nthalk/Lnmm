#!/usr/local/bin/node
// Includes
var sys   = require('sys');
var spawn = require('child_process').spawn;
var fs = require("fs");
var Observable = require("./lib/Observable").Observable;

var o = new Observable();

// Tasks
o.on('install',function(){
  process.chdir("./deps/node-mysql");
  var mysql =  spawn('/usr/local/bin/node-waf',['configure','build']);
  mysql.stderr.addListener('data',function(data){
    process.stdout.write(data);
  });
  mysql.stdout.addListener('data',function(data){
    process.stdout.write(data);
  });
  mysql.addListener('exit',o.relay('node_mysql_complete'));
});

// When we're done installing mysql
o.on('node_mysql_complete',function(){
  process.chdir("../node-memcache");
  var memcache_patch = spawn('git',['apply','../patches/node-memcache.patch']);
  memcache_patch.addListener('exit',o.relay('node_memcache_patch'));
});
// When we're done patching
o.on('node_memcache_patch',function(){
  var memcache =  spawn('/usr/local/bin/node-waf',['configure','build']);
  memcache.stderr.addListener('data',function(data){
    process.stdout.write(data);
  });
  memcache.stdout.addListener('data',function(data){
    process.stdout.write(data);
  });
  memcache.addListener('exit',o.relay('node_memcache_complete'));
});

// Install the crypt module
o.on('node_memcache_complete',function(){
  process.chdir("../node-crypto");
  var crypt = spawn("/usr/local/bin/node-waf",['configure','build']);
  crypt.stderr.addListener('data',function(d){process.stdout.write(d);});
  crypt.stdout.addListener('data',function(d){process.stdout.write(d);});
  crypt.addListener('exit',o.relay('node_crypt_complete'));
});

// When we're done with memcache
o.on('node_crypt_complete',function(){
  var i;
  var lib_path;
  for( i = 0; i < require.paths.length; i++){
    if(require.paths[i].match('.node_libraries')){
      lib_path = require.paths[i]; 
    }
  }
  if(!lib_path){
    throw new Error("I do not know where to link this");
  }
  
  try{fs.unlinkSync(lib_path + "/lnmm")}catch(e){}
  fs.symlinkSync(__dirname, lib_path + "/lnmm" );
  sys.puts("Linking to " +  lib_path + "/lnmm");
  sys.puts("Done!");
});

// run.
o.fire('install');
